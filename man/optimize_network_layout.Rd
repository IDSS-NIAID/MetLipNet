% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optimize_network_layout.R
\name{optimize_network_layout}
\alias{optimize_network_layout}
\title{Optimize Network Layout using XGBoost with Bootstrapping and Validation}
\usage{
optimize_network_layout(
  g,
  n_samples = 50,
  n_bootstrap = 10,
  verbose = TRUE,
  seed = 31415926
)
}
\arguments{
\item{g}{An igraph object representing the network.}

\item{n_samples}{Integer. Number of layout samples to test. Default is 50.}

\item{n_bootstrap}{Integer. Number of bootstrap iterations for stress calculation. Default is 10.}

\item{verbose}{Logical. If TRUE, prints progress messages. Default is TRUE.}

\item{seed}{An optional seed for reproducibility. Set to \code{NULL} to disable (default: 31415926)}
}
\value{
A matrix representing the optimized layout of the graph.
}
\description{
This function optimizes the layout of a given igraph using multiple layout algorithms.
It employs bootstrapping for stress value estimation and uses XGBoost to predict the best layout.
}
\details{
This function evaluates different network layouts (\code{"fr"}, \code{"kk"}, \code{"lgl"}) in parallel
and selects the one with the lowest stress value, calculated using bootstrapped sampling.
XGBoost is trained to predict the best layout based on stress values.

Users should set up parallel processing manually by calling:
\code{future::plan(multisession, workers = availableCores())} before executing this function.
}
\examples{
\dontrun{
  library(igraph)
  g <- erdos.renyi.game(100, p = 0.05)  # Generate a random network
  best_layout <- optimize_network_layout(g)
  plot(g, layout = best_layout)
}

}
